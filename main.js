// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let scene, camera, renderer;
let agents = [];
let locations = [];
let apiKey = '';
let simulationRunning = false;
let simulationPaused = false;
let timeSpeed = 1;
let currentTime = 8 * 60; // 8:00 AM in minutes
const clock = new THREE.Clock();

// „Ç´„É°„É©Âà∂Âæ°Áî®„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
let currentAgentIndex = 0;
let currentFacilityIndex = 0;

// „Ç´„É°„É©„É¢„Éº„ÉâÁÆ°ÁêÜ
let cameraMode = 'free'; // 'free', 'agent', 'facility'
let targetAgent = null;
let targetFacility = null;
let cameraFollowEnabled = false;

// ÊôÇÈñìÂà∂Âæ°Áî®„ÅÆÂ§âÊï∞
let lastTimeUpdate = 0;
let timeUpdateInterval = 0.1; // 0.1Áßí„Åî„Å®„Å´ÊôÇÈñì„ÇíÊõ¥Êñ∞Ôºà1x„ÅÆÂ†¥ÂêàÔºâ

// „Ç´„É°„É©Âà∂Âæ°Áî®„ÅÆÂ§âÊï∞
let cameraControls = {
    moveSpeed: 0.5,
    rotateSpeed: 0.002,
    zoomSpeed: 0.1,
    keys: {
        w: false,
        a: false,
        s: false,
        d: false,
        q: false, // ‰∏äÊòá
        e: false  // ‰∏ãÈôç
    },
    mouse: {
        x: 0,
        y: 0,
        isDown: false,
        lastX: 0,
        lastY: 0
    }
};

// API„Ç≠„ÉºË®≠ÂÆö
function setApiKey() {
    const apiKeyInput = document.getElementById('apiKey');
    const apiStatus = document.getElementById('apiStatus');
    
    if (apiKeyInput && apiKeyInput.value.trim() !== '') {
        apiKey = apiKeyInput.value.trim();
        apiStatus.textContent = '„Çπ„ÉÜ„Éº„Çø„Çπ: Ë®≠ÂÆöÊ∏à„Åø';
        apiStatus.style.color = '#4CAF50';
        addLog('üîë API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Åæ„Åó„Åü', 'system');
        
        // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
        localStorage.setItem('savanna_apiKey', apiKey);
        localStorage.setItem('savanna_apiProvider', getSelectedApiProvider());
    } else {
        apiStatus.textContent = '„Çπ„ÉÜ„Éº„Çø„Çπ: „Ç®„É©„Éº - API„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
        apiStatus.style.color = '#f44336';
        addLog('‚ùå API„Ç≠„Éº„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'error');
    }
}

// ‰øùÂ≠ò„Åï„Çå„ÅüAPI„Ç≠„Éº„ÇíË™≠„ÅøËæº„Åø
function loadSavedApiKey() {
    const savedApiKey = localStorage.getItem('savanna_apiKey');
    const savedProvider = localStorage.getItem('savanna_apiProvider');
    
    if (savedApiKey) {
        apiKey = savedApiKey;
        const apiKeyInput = document.getElementById('apiKey');
        const apiProviderSelect = document.getElementById('apiProvider');
        const apiStatus = document.getElementById('apiStatus');
        
        if (apiKeyInput) {
            apiKeyInput.value = savedApiKey;
        }
        if (savedProvider && apiProviderSelect) {
            apiProviderSelect.value = savedProvider;
        }
        if (apiStatus) {
            apiStatus.textContent = '„Çπ„ÉÜ„Éº„Çø„Çπ: Ë®≠ÂÆöÊ∏à„Åø';
            apiStatus.style.color = '#4CAF50';
        }
    }
}

// API„Ç≠„Éº„Çí„ÇØ„É™„Ç¢
function clearApiKey() {
    apiKey = '';
    const apiKeyInput = document.getElementById('apiKey');
    const apiStatus = document.getElementById('apiStatus');
    
    if (apiKeyInput) {
        apiKeyInput.value = '';
    }
    if (apiStatus) {
        apiStatus.textContent = '„Çπ„ÉÜ„Éº„Çø„Çπ: Êú™Ë®≠ÂÆö';
        apiStatus.style.color = '#666';
    }
    
    localStorage.removeItem('savanna_apiKey');
    localStorage.removeItem('savanna_apiProvider');
    addLog('üóëÔ∏è API„Ç≠„Éº„Åå„ÇØ„É™„Ç¢„Åï„Çå„Åæ„Åó„Åü', 'system');
}

// ÈÅ∏Êäû„Åï„Çå„ÅüAPI„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÂèñÂæó
function getSelectedApiProvider() {
    const apiProviderSelect = document.getElementById('apiProvider');
    return apiProviderSelect ? apiProviderSelect.value : 'openai';
}

// API„Ç≠„Éº„ÅÆÊ§úË®º
function validateApiKey() {
    if (!apiKey || apiKey.trim() === '') {
        addLog('‚ö†Ô∏è API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÂãïÁâ©„ÅÆÊÄùËÄÉÊ©üËÉΩ„ÅåÂà∂Èôê„Åï„Çå„Åæ„Åô„ÄÇ', 'warning');
        return false;
    }
    return true;
}

// LLM APIÂëº„Å≥Âá∫„ÅóÈñ¢Êï∞
async function callLLM({ prompt, systemPrompt, maxTokens = 200, temperature = 0.8, provider = 'openai' }) {
    if (!apiKey || apiKey.trim() === '') {
        throw new Error('API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }

    const headers = {
        'Content-Type': 'application/json'
    };

    let url, body;

    switch (provider) {
        case 'openai':
            url = 'https://api.openai.com/v1/chat/completions';
            headers['Authorization'] = `Bearer ${apiKey}`;
            body = {
                model: 'gpt-3.5-turbo',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: prompt }
                ],
                max_tokens: maxTokens,
                temperature: temperature
            };
            break;

        case 'anthropic':
            url = 'https://api.anthropic.com/v1/messages';
            headers['x-api-key'] = apiKey;
            headers['anthropic-version'] = '2023-06-01';
            body = {
                model: 'claude-3-haiku-20240307',
                max_tokens: maxTokens,
                temperature: temperature,
                messages: [
                    { role: 'user', content: `${systemPrompt}\n\n${prompt}` }
                ]
            };
            break;

        case 'google':
            url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
            body = {
                contents: [{
                    parts: [{
                        text: `${systemPrompt}\n\n${prompt}`
                    }]
                }],
                generationConfig: {
                    maxOutputTokens: maxTokens,
                    temperature: temperature
                }
            };
            // Google API„Ç≠„Éº„ÅØURL„Éë„É©„É°„Éº„Çø„Å®„Åó„Å¶ÈÄÅ‰ø°
            url += `?key=${apiKey}`;
            break;

        default:
            throw new Error('„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑAPI„Éó„É≠„Éê„Ç§„ÉÄ„Éº„Åß„Åô');
    }

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(body)
        });

        if (!response.ok) {
            throw new Error(`APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        // „Éó„É≠„Éê„Ç§„ÉÄ„ÉºÂà•„ÅÆ„É¨„Çπ„Éù„É≥„ÇπËß£Êûê
        switch (provider) {
            case 'openai':
                return data.choices[0]?.message?.content || '';
            case 'anthropic':
                return data.content[0]?.text || '';
            case 'google':
                return data.candidates[0]?.content?.parts[0]?.text || '';
            default:
                return '';
        }
    } catch (error) {
        console.error('APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº:', error);
        throw error;
    }
}

// Three.js„ÅÆÂàùÊúüÂåñ
function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB); // Á©∫Ëâ≤„ÅÆËÉåÊôØÔºà„Çµ„Éê„É≥„Éä„ÅÆÁ©∫Ôºâ
    scene.fog = new THREE.Fog(0x87CEEB, 150, 400); // „Éï„Ç©„Ç∞„ÇíËøΩÂä†
    
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    
    // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíÂèñÂæó„Åó„Å¶„Ç´„É°„É©„ÅÆ‰ΩçÁΩÆ„ÇíË™øÊï¥
    const terrainHeight = getTerrainHeight(0, 0);
    camera.position.set(0, terrainHeight + 200, 60); // È´ò„Åï„Å®Ë∑ùÈõ¢„ÇíÂ¢óÂä†
    camera.lookAt(0, terrainHeight, 0); // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíË¶ã„Çã
    
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    document.getElementById('canvas-container').appendChild(renderer.domElement);
    
    // „É©„Ç§„ÉÜ„Ç£„É≥„Ç∞Ôºà„Çµ„Éê„É≥„Éä„ÅÆÂ§™ÈôΩÂÖâÔºâ
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
    scene.add(ambientLight);
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
    directionalLight.position.set(20, 30, 10);
    directionalLight.castShadow = true;
    directionalLight.shadow.camera.left = -30;
    directionalLight.shadow.camera.right = 30;
    directionalLight.shadow.camera.top = 30;
    directionalLight.shadow.camera.bottom = -30;
    directionalLight.shadow.mapSize.width = 2048;
    directionalLight.shadow.mapSize.height = 2048;
    scene.add(directionalLight);
    
    // „Çµ„Éê„É≥„Éä„ÅÆ„É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÁîüÊàê
    cityLayout = new CityLayout();
    cityLayout.generateRoads();
    //cityLayout.placeBuildings();

    // Âú∞ÂΩ¢„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ
    initTerrain();

    // Âú∞ÂΩ¢„ÅÆ‰ΩúÊàêÔºàÂÄãÂà•„ÅÆÂú∞ÂΩ¢„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÔºâ
    createLocations();
    
    // „Éû„Ç¶„Çπ„Ç≥„É≥„Éà„É≠„Éº„É´
    setupMouseControls();
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„Éó
    animate();

    // ÈÅìË∑Ø„ÅÆÊèèÁîªÔºà„Çµ„Éê„É≥„Éä„Åß„ÅØ‰∏çË¶Å„Å†„Åå„ÄÅÊó¢Â≠ò„ÅÆ„Ç≥„Éº„Éâ„ÇíÁ∂≠ÊåÅÔºâ
    cityLayout.drawRoads();
    
    // Âª∫Áâ©„ÅÆÊèèÁîªÔºàÂú∞ÂΩ¢„Å®„Åó„Å¶ÊèèÁîªÔºâ
    cityLayout.drawBuildings();
    
    // ÊñΩË®≠„ÅÆÊèèÁîªÔºàÂú∞ÂΩ¢„Å®„Åó„Å¶ÊèèÁîªÔºâ
    cityLayout.drawFacilities();

    // „Éë„Éç„É´„ÅÆHTML„ÇíÊõ¥Êñ∞
    updatePanelHTML();
    
    // „Éë„Éç„É´„ÅÆ„Éâ„É©„ÉÉ„Ç∞Ê©üËÉΩ„ÇíË®≠ÂÆö
    setupPanelDrag();

    // „Ç´„É°„É©Âà∂Âæ°„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„ÉàÁôªÈå≤
    const personBtn = document.getElementById('personViewBtn');
    const facilityBtn = document.getElementById('facilityViewBtn');
    const resetBtn = document.getElementById('resetCamera');

    if (personBtn) {
        personBtn.addEventListener('click', () => {
            if (agents.length === 0) {
                addLog('‚ö†Ô∏è ÂãïÁâ©„Åå„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'warning');
                return;
            }
            currentAgentIndex = (currentAgentIndex + 1) % agents.length;
            focusCameraOnAgentByIndex(currentAgentIndex);
        });
    }
    if (facilityBtn) {
        facilityBtn.addEventListener('click', () => {
            const facilities = locations.filter(loc => !loc.isHome);
            if (facilities.length === 0) {
                addLog('‚ö†Ô∏è Âú∞ÂΩ¢„Åå„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'warning');
                return;
            }
            currentFacilityIndex = (currentFacilityIndex + 1) % facilities.length;
            focusCameraOnFacilityByIndex(currentFacilityIndex);
        });
    }
    if (resetBtn) {
        resetBtn.addEventListener('click', resetCamera);
    }

    // ÈÅìË∑ØË°®Á§∫„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„ÉàÁôªÈå≤Ôºà„Çµ„Éê„É≥„Éä„Åß„ÅØ‰∏çË¶Å„Å†„Åå„ÄÅÊó¢Â≠ò„ÅÆ„Ç≥„Éº„Éâ„ÇíÁ∂≠ÊåÅÔºâ
    const toggleRoadBtn = document.getElementById('toggleRoadNetwork');
    const clearRoadBtn = document.getElementById('clearRoadVisualization');

    if (toggleRoadBtn) {
        toggleRoadBtn.addEventListener('click', () => {
            cityLayout.visualizeRoadNetwork();
            addLog('üõ£Ô∏è Âú∞ÂΩ¢„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÅÆË¶ñË¶öÂåñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'system');
        });
    }
    if (clearRoadBtn) {
        clearRoadBtn.addEventListener('click', () => {
            cityLayout.clearRoadNetworkVisualization();
            cityLayout.clearPathVisualization();
            addLog('üóëÔ∏è Âú∞ÂΩ¢Ë°®Á§∫„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü', 'system');
        });
    }

    // „Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫ÂØæÂøú
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });
    
    // ‰øùÂ≠ò„Åï„Çå„ÅüAPI„Ç≠„Éº„ÇíË™≠„ÅøËæº„Åø
    loadSavedApiKey();
    
    // API„Ç≠„Éº„ÅÆÊ§úË®º
    validateApiKey();
}

// „Éû„Ç¶„Çπ„Ç≥„É≥„Éà„É≠„Éº„É´
function setupMouseControls() {
    let isPanelDragging = false; // „Éë„Éç„É´„Éâ„É©„ÉÉ„Ç∞‰∏≠„Åã„Å©„ÅÜ„Åã„ÅÆ„Éï„É©„Ç∞
    
    // „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà
    document.addEventListener('keydown', (event) => {
        if (cameraMode !== 'free') return; // „Éï„É™„Éº„Ç´„É°„É©„É¢„Éº„Éâ„ÅÆ„Åø
        
        switch(event.code) {
            case 'KeyW': cameraControls.keys.w = true; break;
            case 'KeyA': cameraControls.keys.a = true; break;
            case 'KeyS': cameraControls.keys.s = true; break;
            case 'KeyD': cameraControls.keys.d = true; break;
            case 'KeyQ': cameraControls.keys.q = true; break;
            case 'KeyE': cameraControls.keys.e = true; break;
        }
    });
    
    document.addEventListener('keyup', (event) => {
        if (cameraMode !== 'free') return; // „Éï„É™„Éº„Ç´„É°„É©„É¢„Éº„Éâ„ÅÆ„Åø
        
        switch(event.code) {
            case 'KeyW': cameraControls.keys.w = false; break;
            case 'KeyA': cameraControls.keys.a = false; break;
            case 'KeyS': cameraControls.keys.s = false; break;
            case 'KeyD': cameraControls.keys.d = false; break;
            case 'KeyQ': cameraControls.keys.q = false; break;
            case 'KeyE': cameraControls.keys.e = false; break;
        }
    });
    
    // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà
    document.addEventListener('mousemove', (event) => {
        // ÂãïÁâ©Ë¶ñÁÇπ„É¢„Éº„Éâ‰∏≠„ÅØ„Éû„Ç¶„ÇπÊìç‰Ωú„ÇíÁÑ°Âäπ
        if (cameraMode === 'agent' && cameraFollowEnabled) {
            return;
        }
        
        cameraControls.mouse.x = event.clientX;
        cameraControls.mouse.y = event.clientY;
        
        if (cameraControls.mouse.isDown && !isPanelDragging && cameraMode === 'free') {
            const deltaX = event.clientX - cameraControls.mouse.lastX;
            const deltaY = event.clientY - cameraControls.mouse.lastY;
            
            // „Ç´„É°„É©„ÅÆÂõûËª¢ÔºàË¶ñÁÇπ„ÅÆÂ§âÊõ¥Ôºâ
            const rotationX = camera.rotation.x - deltaY * cameraControls.rotateSpeed;
            const rotationY = camera.rotation.y - deltaX * cameraControls.rotateSpeed;
            
            // ‰∏ä‰∏ã„ÅÆÂõûËª¢„ÇíÂà∂ÈôêÔºà-85Â∫¶„Äú85Â∫¶Ôºâ
            camera.rotation.x = Math.max(-Math.PI * 0.47, Math.min(Math.PI * 0.47, rotationX));
            camera.rotation.y = rotationY;
        }
        
        cameraControls.mouse.lastX = event.clientX;
        cameraControls.mouse.lastY = event.clientY;
    });
    
    document.addEventListener('mousedown', (event) => {
        if (cameraMode === 'free') {
            cameraControls.mouse.isDown = true;
            cameraControls.mouse.lastX = event.clientX;
            cameraControls.mouse.lastY = event.clientY;
        }
    });
    
    document.addEventListener('mouseup', () => {
        cameraControls.mouse.isDown = false;
    });
    
    // „Éõ„Ç§„Éº„É´„Ç§„Éô„É≥„ÉàÔºà„Ç∫„Éº„É†Ôºâ
    document.addEventListener('wheel', (event) => {
        // ÂãïÁâ©Ë¶ñÁÇπ„É¢„Éº„Éâ‰∏≠„ÅØ„Ç∫„Éº„É†Êìç‰Ωú„ÇíÁÑ°Âäπ
        if (cameraMode === 'agent' && cameraFollowEnabled) {
            return;
        }
        
        if (!isPanelDragging && cameraMode === 'free') {
            const zoomDirection = event.deltaY > 0 ? 1 : -1;
            const zoomAmount = zoomDirection * cameraControls.zoomSpeed;
            
            // „Ç´„É°„É©„ÅÆÂâçÊñπÂêë„Å´ÁßªÂãïÔºà„Ç∫„Éº„É†Ôºâ
            const direction = new THREE.Vector3(0, 0, -1);
            direction.applyQuaternion(camera.quaternion);
            direction.multiplyScalar(zoomAmount * 10);
            
            camera.position.add(direction);
            
            // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíËÄÉÊÖÆ„Åó„ÅüÈ´ò„ÅïË™øÊï¥
            const terrainHeight = getTerrainHeight(camera.position.x, camera.position.z);
            const minHeight = terrainHeight + 20;
            const maxHeight = terrainHeight + 500;
            
            camera.position.y = Math.max(minHeight, Math.min(maxHeight, camera.position.y));
        }
    });

    // „Éë„Éç„É´„Éâ„É©„ÉÉ„Ç∞Áä∂ÊÖã„ÇíÁõ£Ë¶ñ„Åô„ÇãÈñ¢Êï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
    window.setPanelDragging = function(dragging) {
        isPanelDragging = dragging;
    };
}

// ÂãïÁâ©„ÅÆ‰ΩúÊàê
function createAnimals() {
    // Âú∞ÂΩ¢„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (locations.length === 0) {
        addLog('‚ö†Ô∏è Âú∞ÂΩ¢„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÂú∞ÂΩ¢„Çí‰ΩúÊàê„Åó„Å¶„Åã„ÇâÂãïÁâ©„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ', 'warning');
        createLocations();
    }
    
    animalPersonalities.forEach((animalData, index) => {
        // ÂãïÁâ©„ÅÆÂàùÊúü‰ΩçÁΩÆ„ÇíÂãïÁöÑ„Å´ÁîüÊàê
        const homeLocation = findSuitableHomeLocation(animalData.type, index);
        
        // home„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
        animalData.home = {
            name: `${animalData.name}„ÅÆ${animalData.type === '„É©„Ç§„Ç™„É≥' || animalData.type === '„Éè„Ç§„Ç®„Éä' ? 'Ê¥ûÁ©¥' : '‰ºëÊÅØÂú∞'}`,
            x: homeLocation.x,
            z: homeLocation.z,
            color: animalData.color,
            terrainType: homeLocation.terrainType
        };
        
        const animal = new Animal(animalData, index);
        agents.push(animal);
    });
    
    // ÂãïÁâ©‰ΩúÊàêÂæå„ÄÅ„Åô„Åê„Å´Ë°åÂãï„ÇíÈñãÂßã„Åï„Åõ„Çã
    agents.forEach(animal => {
        if (animal.isAlive) {
            // ÂàùÊúüË°åÂãï„ÇíË®≠ÂÆö
            setTimeout(() => {
                animal.executeDefaultAction();
            }, 1000 + Math.random() * 2000); // 1-3ÁßíÂæå„Å´Ë°åÂãïÈñãÂßã
        }
    });
    
    addLog(`ü¶Å „Çµ„Éê„É≥„Éä„Å´${agents.length}Âåπ„ÅÆÂãïÁâ©„ÅåË™ïÁîü„Åó„Åæ„Åó„Åü`, 'system');
}

// ÊôÇÈñì„ÅÆÊõ¥Êñ∞
function updateTime() {
    const now = clock.getElapsedTime();
    if (now - lastTimeUpdate >= timeUpdateInterval) {
        currentTime += timeSpeed;
        if (currentTime >= 24 * 60) {
            currentTime = 0; // 24ÊôÇÈñì„Åß„É™„Çª„ÉÉ„Éà
        }
        lastTimeUpdate = now;
        
        // ÊôÇÈñìË°®Á§∫„ÅÆÊõ¥Êñ∞
        const hours = Math.floor(currentTime / 60);
        const minutes = currentTime % 60;
        const timeDisplay = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        
        const timeElement = document.getElementById('time-display');
        if (timeElement) {
            timeElement.textContent = timeDisplay;
        }
        
        // Áí∞Â¢É„ÅÆÊõ¥Êñ∞
        updateEnvironment(hours);
    }
}

// Áí∞Â¢É„ÅÆÊõ¥Êñ∞
function updateEnvironment(hour) {
    // ÊôÇÈñìÂ∏Ø„Å´Âøú„Åò„ÅüÁí∞Â¢ÉÂ§âÂåñ
    if (hour >= 6 && hour < 18) {
        // ÊòºÈñì
        scene.background = new THREE.Color(0x87CEEB); // Êòé„Çã„ÅÑÁ©∫Ëâ≤
        if (scene.fog) {
            scene.fog.color.setHex(0x87CEEB);
        }
    } else {
        // Â§úÈñì
        scene.background = new THREE.Color(0x1a1a2e); // Êöó„ÅÑÂ§úÁ©∫
        if (scene.fog) {
            scene.fog.color.setHex(0x1a1a2e);
        }
    }
    
    // ÂãïÁâ©„ÅÆË°åÂãï„Éë„Çø„Éº„É≥„ÅÆÊõ¥Êñ∞
    agents.forEach(animal => {
        if (animal.isAlive) {
            const timeOfDay = animal.getTimeOfDay();
            // ÊôÇÈñìÂ∏Ø„Å´Âøú„Åò„ÅüË°åÂãï„ÅÆË™øÊï¥
            if (timeOfDay === 'night' && animal.type !== '„Éè„Ç§„Ç®„Éä') {
                // Â§úË°åÊÄß„Åß„Å™„ÅÑÂãïÁâ©„ÅØÂ§ú„Å´‰ºëÊÅØ
                animal.energy = Math.min(1.0, animal.energy + 0.01);
            }
        }
    });
}

// ÂãïÁâ©ÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
function updateAgentInfo() {
    const agentInfoContainer = document.getElementById('agent-info');
    if (!agentInfoContainer) return;
    
    let html = '<h3>„Çµ„Éê„É≥„Éä„ÅÆÂãïÁâ©„Åü„Å°</h3>';
    
    // ÂãïÁâ©„ÅÆÁ®ÆÈ°ûÂà•„Å´„Ç∞„É´„Éº„ÉóÂåñ
    const animalGroups = {};
    agents.forEach(animal => {
        if (!animalGroups[animal.type]) {
            animalGroups[animal.type] = [];
        }
        animalGroups[animal.type].push(animal);
    });
    
    Object.keys(animalGroups).forEach(type => {
        html += `<h4>${type}</h4>`;
        animalGroups[type].forEach(animal => {
            const status = animal.isAlive ? 'üü¢' : 'üî¥';
            const hpPercentage = animal.isAlive ? (animal.hp / animal.maxHp * 100).toFixed(0) : 0;
            const hungerPercentage = (animal.hunger * 100).toFixed(0);
            const thirstPercentage = (animal.thirst * 100).toFixed(0);
            
            html += `
                <div class="animal-info" onclick="selectAnimal('${animal.name}')">
                    <span class="animal-status">${status}</span>
                    <span class="animal-name">${animal.name}</span>
                    <span class="animal-hp">HP: ${hpPercentage}%</span>
                    <span class="animal-hunger">Á©∫ËÖπ: ${hungerPercentage}%</span>
                    <span class="animal-thirst">Âñâ„ÅÆÊ∏á„Åç: ${thirstPercentage}%</span>
                    <span class="animal-location">${animal.currentLocation?.name || '‰∏çÊòé'}</span>
                </div>
            `;
        });
    });
    
    agentInfoContainer.innerHTML = html;
}

// ÂãïÁâ©ÈÅ∏Êäû
function selectAnimal(animalName) {
    const animal = agents.find(a => a.name === animalName);
    if (animal) {
        // „Ç´„É°„É©„ÇíÂãïÁâ©„Å´„Éï„Ç©„Éº„Ç´„Çπ
        focusCameraOnAgent(animal);
        
        // ÈÅ∏Êäû„Åï„Çå„ÅüÂãïÁâ©„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
        const selectedAnimalInfo = document.getElementById('selected-animal-info');
        if (selectedAnimalInfo) {
            const animalInfo = animalTypes[animal.type];
            selectedAnimalInfo.innerHTML = `
                <h3>${animal.name} (${animal.type})</h3>
                <p><strong>Âπ¥ÈΩ¢:</strong> ${animal.age}Ê≠≥</p>
                <p><strong>ÊÄßÊ†º:</strong> ${animal.personality.description}</p>
                <p><strong>HP:</strong> ${animal.hp}/${animal.maxHp}</p>
                <p><strong>Á©∫ËÖπÂ∫¶:</strong> ${(animal.hunger * 100).toFixed(1)}%</p>
                <p><strong>Âñâ„ÅÆÊ∏á„Åç:</strong> ${(animal.thirst * 100).toFixed(1)}%</p>
                <p><strong>ÁèæÂú®Âú∞:</strong> ${animal.currentLocation?.name || '‰∏çÊòé'}</p>
                <p><strong>Áä∂ÊÖã:</strong> ${animal.isAlive ? 'ÁîüÂ≠ò' : 'Ê≠ª‰∫°'}</p>
                <p><strong>Ë™¨Êòé:</strong> ${animalInfo?.description || ''}</p>
                <p><strong>ÊîªÊíÉÂäõ:</strong> ${animal.attackPower}</p>
                <p><strong>Èò≤Âæ°Âäõ:</strong> ${animal.defense}</p>
                <p><strong>ÈÄüÂ∫¶:</strong> ${animal.speed}</p>
            `;
        }
    }
}

// „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÈñãÂßã
function startSimulation() {
    if (simulationRunning) return;
    
    simulationRunning = true;
    simulationPaused = false;
    
    // Âú∞ÂΩ¢„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (locations.length === 0) {
        addLog('üåç Âú∞ÂΩ¢„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...', 'system');
        createLocations();
    }
    
    // ÂãïÁâ©„Åå„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (agents.length === 0) {
        createAnimals();
    }
    
    addLog('ü¶Å „Çµ„Éê„É≥„Éä„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'system');
    
    // ÈñãÂßã„Éú„Çø„É≥„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    if (startBtn) startBtn.disabled = true;
    if (pauseBtn) pauseBtn.disabled = false;
}

// „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥‰∏ÄÊôÇÂÅúÊ≠¢
function pauseSimulation() {
    if (!simulationRunning) return;
    
    simulationPaused = !simulationPaused;
    
    if (simulationPaused) {
        addLog('‚è∏Ô∏è „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Çí‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', 'system');
    } else {
        addLog('‚ñ∂Ô∏è „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÜçÈñã„Åó„Åæ„Åó„Åü', 'system');
    }
    
    // „Éú„Çø„É≥„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    const pauseBtn = document.getElementById('pauseBtn');
    if (pauseBtn) {
        pauseBtn.textContent = simulationPaused ? 'ÂÜçÈñã' : '‰∏ÄÊôÇÂÅúÊ≠¢';
    }
}

// ÊôÇÈñìÈÄüÂ∫¶„ÅÆË®≠ÂÆö
function setTimeSpeed() {
    const speedSelect = document.getElementById('timeSpeed');
    if (speedSelect) {
        timeSpeed = parseInt(speedSelect.value);
        timeUpdateInterval = 0.1 / timeSpeed; // ÊôÇÈñìÈÄüÂ∫¶„Å´Âøú„Åò„Å¶Êõ¥Êñ∞ÈñìÈöî„ÇíË™øÊï¥
        addLog(`‚è±Ô∏è ÊôÇÈñìÈÄüÂ∫¶„Çí${timeSpeed}x„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü`, 'system');
    }
}

// „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„Éó
function animate() {
    requestAnimationFrame(animate);
    
    const deltaTime = clock.getDelta() * 1000; // „Éü„É™ÁßíÂçò‰Ωç
    
    if (simulationRunning && !simulationPaused) {
        // ÊôÇÈñì„ÅÆÊõ¥Êñ∞
        updateTime();
        
        // ÂãïÁâ©„ÅÆÊõ¥Êñ∞
        agents.forEach(animal => {
            if (animal.isAlive) {
                animal.update(deltaTime);
            }
        });
        
        // ÂãïÁâ©ÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
        updateAgentInfo();
    }
    
    // „Ç´„É°„É©„ÅÆÁßªÂãï„ÇíÊõ¥Êñ∞Ôºà„Éï„É™„Éº„Ç´„É°„É©„É¢„Éº„ÉâÊôÇÔºâ
    updateCameraMovement(deltaTime);
    
    // „Ç´„É°„É©„Éï„Ç©„É≠„Éº„ÅÆÊõ¥Êñ∞Ôºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Áä∂ÊÖã„Å´Èñ¢‰øÇ„Å™„ÅèÂÆüË°åÔºâ
    updateCameraFollow();
    
    // Âú∞ÂΩ¢„Ç∑„Çπ„ÉÜ„É†„ÅÆÊõ¥Êñ∞
    updateTerrain();
    
    renderer.render(scene, camera);
}

// „Ç´„É°„É©„Çø„Éº„Ç≤„ÉÉ„ÉàË°®Á§∫„ÅÆÊõ¥Êñ∞
function updateCameraTargetDisplay() {
    const targetDisplay = document.getElementById('camera-target');
    if (!targetDisplay) return;
    
    if (cameraMode === 'agent' && targetAgent) {
        targetDisplay.textContent = `ÂãïÁâ©: ${targetAgent.name}`;
    } else if (cameraMode === 'facility' && targetFacility) {
        targetDisplay.textContent = `Âú∞ÂΩ¢: ${targetFacility.name}`;
    } else {
        targetDisplay.textContent = '„Éï„É™„Éº„Ç´„É°„É©';
    }
}

// „Ç´„É°„É©„É¢„Éº„ÉâË°®Á§∫„ÅÆÊõ¥Êñ∞
function updateCameraModeDisplay() {
    const modeDisplay = document.getElementById('camera-mode');
    if (!modeDisplay) return;
    
    switch (cameraMode) {
        case 'free':
            modeDisplay.textContent = '„Éï„É™„Éº';
            break;
        case 'agent':
            modeDisplay.textContent = 'ÂãïÁâ©ËøΩÂæì';
            break;
        case 'facility':
            modeDisplay.textContent = 'Âú∞ÂΩ¢Âõ∫ÂÆö';
            break;
    }
}

// „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅßÂãïÁâ©„Å´„Ç´„É°„É©„Çí„Éï„Ç©„Éº„Ç´„Çπ
function focusCameraOnAgentByIndex(index) {
    if (index >= 0 && index < agents.length) {
        const agent = agents[index];
        focusCameraOnAgent(agent);
    }
}

// ÂãïÁâ©„Å´„Ç´„É°„É©„Çí„Éï„Ç©„Éº„Ç´„Çπ
function focusCameraOnAgent(agent) {
    if (!agent || !agent.isAlive) return;
    
    cameraMode = 'agent';
    targetAgent = agent;
    cameraFollowEnabled = true;
    
    // „Ç´„É°„É©„ÇíÂãïÁâ©„ÅÆ‰ΩçÁΩÆ„Å´ÁßªÂãïÔºàÂú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíËÄÉÊÖÆÔºâ
    const agentPosition = agent.mesh.position;
    const terrainHeight = getTerrainHeight(agentPosition.x, agentPosition.z);
    
    // „Çà„ÇäÂÆâÂÆö„Åó„Åü„Ç´„É°„É©‰ΩçÁΩÆ„ÇíË®≠ÂÆö
    const cameraOffset = new THREE.Vector3(-10, 15, 10);
    const targetPosition = new THREE.Vector3(
        agentPosition.x + cameraOffset.x,
        Math.max(agentPosition.y + cameraOffset.y, terrainHeight + 20),
        agentPosition.z + cameraOffset.z
    );
    
    // „Çπ„É†„Éº„Ç∫„Å™„Ç´„É°„É©ÁßªÂãï
    camera.position.lerp(targetPosition, 0.1);
    
    // „Ç´„É°„É©„ÅÆÂêë„Åç„ÇíÂãïÁâ©„Å´Âêë„Åë„Çã
    const lookAtPosition = new THREE.Vector3(
        agentPosition.x,
        agentPosition.y + 2, // ÂãïÁâ©„ÅÆÂ∞ë„Åó‰∏ä„ÇíË¶ã„Çã
        agentPosition.z
    );
    camera.lookAt(lookAtPosition);
    
    updateCameraTargetDisplay();
    updateCameraModeDisplay();
    
    addLog(`üì∑ „Ç´„É°„É©„Åå${agent.name}„Å´„Éï„Ç©„Éº„Ç´„Çπ„Åó„Åæ„Åó„Åü`, 'camera');
}

// „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅßÂú∞ÂΩ¢„Å´„Ç´„É°„É©„Çí„Éï„Ç©„Éº„Ç´„Çπ
function focusCameraOnFacilityByIndex(index) {
    const facilities = locations.filter(loc => !loc.isHome);
    if (index >= 0 && index < facilities.length) {
        const facility = facilities[index];
        focusCameraOnFacility(facility);
    }
}

// Âú∞ÂΩ¢„Å´„Ç´„É°„É©„Çí„Éï„Ç©„Éº„Ç´„Çπ
function focusCameraOnFacility(facility) {
    if (!facility) return;
    
    cameraMode = 'facility';
    targetFacility = facility;
    cameraFollowEnabled = false;
    
    // „Ç´„É°„É©„ÇíÂú∞ÂΩ¢„ÅÆ‰ΩçÁΩÆ„Å´ÁßªÂãïÔºàÂú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíËÄÉÊÖÆÔºâ
    const facilityPosition = facility.position;
    const terrainHeight = getTerrainHeight(facilityPosition.x, facilityPosition.z);
    
    camera.position.set(
        facilityPosition.x,
        Math.max(facilityPosition.y + 15, terrainHeight + 20), // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇÇËÄÉÊÖÆ
        facilityPosition.z + 12
    );
    camera.lookAt(facilityPosition.x, facilityPosition.y, facilityPosition.z);
    
    updateCameraTargetDisplay();
    updateCameraModeDisplay();
    
    addLog(`üì∑ „Ç´„É°„É©„Åå${facility.name}„Å´„Éï„Ç©„Éº„Ç´„Çπ„Åó„Åæ„Åó„Åü`, 'camera');
}

// „Ç´„É°„É©„É™„Çª„ÉÉ„Éà
function resetCamera() {
    cameraMode = 'free';
    targetAgent = null;
    targetFacility = null;
    cameraFollowEnabled = false;
    
    // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíÂèñÂæó„Åó„Å¶„Ç´„É°„É©„ÅÆ‰ΩçÁΩÆ„ÇíË™øÊï¥
    const terrainHeight = getTerrainHeight(0, 0);
    camera.position.set(0, terrainHeight + 200, 60); // „É¶„Éº„Ç∂„Éº„ÅåË®≠ÂÆö„Åó„ÅüÈ´ò„Åï„Å´Âêà„Çè„Åõ„Çã
    
    // „Ç´„É°„É©„ÅÆÂõûËª¢„ÇÇ„É™„Çª„ÉÉ„Éà
    camera.rotation.set(0, 0, 0);
    
    updateCameraTargetDisplay();
    updateCameraModeDisplay();
    
    addLog('üì∑ „Ç´„É°„É©„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü', 'camera');
}

// „Ç´„É°„É©„Éï„Ç©„É≠„Éº„ÅÆÊõ¥Êñ∞
function updateCameraFollow() {
    if (cameraMode === 'agent' && targetAgent && cameraFollowEnabled && targetAgent.isAlive) {
        const agentPosition = targetAgent.mesh.position;
        const terrainHeight = getTerrainHeight(agentPosition.x, agentPosition.z);
        
        // ÂãïÁâ©„ÅÆÁßªÂãïÈÄüÂ∫¶„Å´Âøú„Åò„Å¶„Ç´„É°„É©„ÅÆËøΩÂæìÈÄüÂ∫¶„ÇíË™øÊï¥
        const followSpeed = targetAgent.movementTarget ? 0.1 : 0.05; // ÁßªÂãï‰∏≠„ÅØÈÄü„Åè„ÄÅÂÅúÊ≠¢‰∏≠„ÅØÈÅÖ„Åè
        
        // „Çà„ÇäÂÆâÂÆö„Åó„Åü„Ç´„É°„É©‰ΩçÁΩÆ„ÇíË®≠ÂÆö
        const cameraOffset = new THREE.Vector3(-10, 15, 10);
        const targetPosition = new THREE.Vector3(
            agentPosition.x + cameraOffset.x,
            Math.max(agentPosition.y + cameraOffset.y, terrainHeight + 20),
            agentPosition.z + cameraOffset.z
        );
        
        // „Çπ„É†„Éº„Ç∫„Å™„Ç´„É°„É©ÁßªÂãï
        camera.position.lerp(targetPosition, followSpeed);
        
        // „Ç´„É°„É©„ÅÆÂêë„Åç„ÇíÂãïÁâ©„Å´Âêë„Åë„Çã
        const lookAtPosition = new THREE.Vector3(
            agentPosition.x,
            agentPosition.y + 2, // ÂãïÁâ©„ÅÆÂ∞ë„Åó‰∏ä„ÇíË¶ã„Çã
            agentPosition.z
        );
        camera.lookAt(lookAtPosition);
        
        // „Ç´„É°„É©„Çø„Éº„Ç≤„ÉÉ„ÉàË°®Á§∫„ÇíÊõ¥Êñ∞
        updateCameraTargetDisplay();
    }
}

// „Ç´„É°„É©„ÅÆÁßªÂãï„ÇíÊõ¥Êñ∞
function updateCameraMovement(deltaTime) {
    if (cameraMode !== 'free') return;
    
    const moveSpeed = cameraControls.moveSpeed * deltaTime;
    const direction = new THREE.Vector3();
    
    // WASD„Ç≠„Éº„Å´„Çà„ÇãÁßªÂãï
    if (cameraControls.keys.w) {
        direction.z -= 1; // ÂâçÈÄ≤
    }
    if (cameraControls.keys.s) {
        direction.z += 1; // ÂæåÈÄÄ
    }
    if (cameraControls.keys.a) {
        direction.x -= 1; // Â∑¶ÁßªÂãï
    }
    if (cameraControls.keys.d) {
        direction.x += 1; // Âè≥ÁßªÂãï
    }
    
    // ÁßªÂãïÊñπÂêë„ÇíÊ≠£Ë¶èÂåñ
    if (direction.length() > 0) {
        direction.normalize();
        
        // „Ç´„É°„É©„ÅÆÂõûËª¢„ÇíËÄÉÊÖÆ„Åó„Å¶ÁßªÂãïÊñπÂêë„ÇíÂ§âÊèõ
        direction.applyQuaternion(camera.quaternion);
        direction.y = 0; // YËª∏„ÅÆÁßªÂãï„ÅØÁÑ°ÂäπÔºàÊ∞¥Âπ≥ÁßªÂãï„ÅÆ„ÅøÔºâ
        direction.normalize();
        
        // „Ç´„É°„É©„ÇíÁßªÂãï
        camera.position.add(direction.multiplyScalar(moveSpeed));
    }
    
    // QE„Ç≠„Éº„Å´„Çà„Çã‰∏ä‰∏ãÁßªÂãï
    if (cameraControls.keys.q) {
        camera.position.y += moveSpeed;
    }
    if (cameraControls.keys.e) {
        camera.position.y -= moveSpeed;
    }
    
    // Âú∞ÂΩ¢„ÅÆÈ´ò„Åï„ÇíËÄÉÊÖÆ„Åó„ÅüÈ´ò„ÅïÂà∂Èôê
    const terrainHeight = getTerrainHeight(camera.position.x, camera.position.z);
    const minHeight = terrainHeight + 20;
    const maxHeight = terrainHeight + 500;
    
    camera.position.y = Math.max(minHeight, Math.min(maxHeight, camera.position.y));
}

// ÂàùÊúüÂåñ
window.addEventListener('load', () => {
    init();
});



